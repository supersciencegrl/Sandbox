import sqlite3

class dbfunctions():
    def printSQL(self, sql):
        conn = sqlite3.connect(mydb)
        mydata = conn.execute(sql)
        for row in mydata:
            print(row)
        conn.close()
        print('\n')

    def SQLheader(self, table):
        conn = sqlite3.connect(mydb)
        sql = f'SELECT * FROM {table} LIMIT 10'
        mydata = conn.execute(sql)
        for row in mydata:
            print(row)
        conn.close
        print('\n')

class runclass(dbfunctions):
    obj = dbfunctions() # Create an object
    obj.printmsg()
    obj.printmsgchild() # Calling function on the object from the class
    obj.printSQLgeneral()

def getSQL():
    global sqlcols, sqltable, sqlwhere, sqlorder
    sql = ' '.join(sqlcols, sqltable, sqlwhere, sqlorder)

    return sql

mydb = 'taster.db'

sqlcols = ''
sqltable = ''
sqlwhere = ''
sqlorder = ''

''' SELECT Productname, Price, CategoryID
FROM Products
WHERE CategoryID < 3
ORDER BY CategoryID, Price DESC LIMIT 1;
'''

# You can write comments in SQL by using '--'
sql = '--Select all customers with this command: \
        SELECT * FROM Customers;'
''' You can also write multiline comments like this:
    /* This is what a SQL
        multiline comment
        looks like */
    '''

# Commands and column names are not case-sensitive by default
# Convention is to write commands in all caps
# Some database systems require a semicolon at the end of every SQL statement
sqlcols = 'SELECT ProductName, Price, CategoryID'
sqltable = 'FROM Products'
sqlwhere = 'WHERE CategoryID < 3;'
sqlorder = 'ORDER BY CategoryID ASC, Price DESC LIMIT 1;' # LIMIT = total no. records returned
# Some database systems use SELECT TOP or FETCH FIRST n ROWS ONLY and ROWNUM instead of LIMIT

sql = getSQL()
printSQL(sql)

# Show all (unique) cities
sql = 'SELECT DISTINCT CustomerName, ContactName, City FROM Customers;'
printSQL()

# Or count them
sql = 'SELECT COUNT(DISTINCT City) FROM Customers;'
printSQL()

# Use substrings in WHERE
# '%' represents multiple characters (0 to many)
# '_' represents a single character (exactly 1)
# [abc] represents 'a', 'b', or 'c'
# [^abc] reresents any character that is not 'a', 'b', or 'c'
# [a-d] represents 'a', 'b', 'c', or 'd'
sql = 'SELECT * FROM Customers WHERE Country LIKE "U%";' # Note the 'U%' attribute is not case-sensitive
printSQL()

# Or tuples for multiple values
sql = 'SELECT * FROM Customers WHERE Country IN ("Mexico", "Germany");'
printSQL()
# Can also use BETWEEN operator for numerical or date values - or text values, alphabetically

# Date values are placed between '#' or "'"
sql = 'SELECT * FROM Orders WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;'

# Use AND, OR, and NOT operators
sql = 'SELECT * FROM Customers WHERE NOT City = "Berlin" AND Country = "Germany" ORDER BY PostalCode;' # Could also have used OR for the example above
printSQL()

# Look for null values with IS NULL or IS NOT NULL
sql = ('SELECT * FROM Customers WHERE City IS NOT NULL')

# You can also handle null values
# This query deals with null values in UnitsOnOrder by replacing with 0 to allow sums (otherwise the result is returned as null)
sql = 'SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0)) FROM Products;'
# The COALESCE() function also returns the first non-null from a list, so could be used similarly
sql = 'SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) FROM Products;'

# Add a new record
sql = 'INSERT INTO Customers (CustomerName, ContactName, Address, City) VALUES ("SuperScienceGrl", "Nessa Carson", "MyHouse", "Bracknell")'
# If you're adding values to all columns in order (minus an autogenerated ID column), no need to specify the tuple of column names
# Unspecified columns will be filled with a null value

# Modify existing records
sql = 'UPDATE Customers SET Address = "32 Pie Street", City = "Birmingham", PostalCode = "B1 1AA" \
        WHERE Contactname = "Thomas Hardy" AND Address = "120 Hanover Sq.";'
# I guess you're going to want to be really careful and print the WHERE results before modifying anything

# And delete records
sql = 'DELETE FROM Customers WHERE ContactName = "Thomas Hardy" AND Address = "120 Hanover Sq.";'
# Be careful and print the WHERE results before deleting anything! 

# You can delete all records in a table while maintaining the table - it will still have the same structure and indices
sql = 'DELETE FROM table_name;'

# Use MIN() and MAX()
sql = 'SELECT MIN(Price) FROM Products WHERE CategoryID < 3;'
# Can also use other simple functions for numerical columns, COUNT(), AVG(), and SUM()

# Use IN between different tables
sql = 'SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);'

# Alias column or table names
# Aliases only exist as query variables (ie: for the duration of the sql query)
# Enclose the alias in '"' or [] if it contains spaces
sql = 'SELECT CustomerID AS ID, PostalCode AS [Zip Code] FROM Customers;'

# Table aliases are most useful when there are multiple tables in a query
sql = 'SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName = "Around the Horn" AND c.CustomerID = o.CustomerID;'

# JOIN can combine rows from different tables, based on related columns
sql = 'SELECT o.OrderID, c.CustomerName, o.OrderDate FROM Orders AS o INNER JOIN Customers AS c ON o.CustomerID=c.CustomerID;'
# INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN - full = all 3 possibilities
# FULL JOIN = FULL OUTER JOIN
# LEFT JOIN and RIGHT JOIN will return all records from the requisite table, with null values where there are no matches on the other table
# You can stack JOIN statements
sql = 'SELECT o.OrderID, c.CustomerName, s.ShipperName FROM ((Orders AS o INNER JOIN Customers AS c ON o.CustomerID = c.CustomerID) INNER JOIN Shippers as s ON o.ShipperID = s.ShipperID);'

# Self joins are between different aliases for the same table
# Here we match customers that are from the same city
sql = 'SELECT a.CustomerName AS Customer1, B.CustomerName AS Customer2, A.City FROM Customers AS A, Customers AS B WHERE A.CustomerID != B.CustomerID AND A.City = B.City ORDER BY A.City;'
# You can also miss out 'AS' operators
sql = 'SELECT a.CustomerName Customer1, B.CustomerName Customer2, A.City FROM Customers A, Customers B WHERE A.CustomerID != B.CustomerID AND A.City = B.City ORDER BY A.City;'

# UNION combines results sets from multiple SELECT statements (if they have similarly-structured data)
# UNION shows distinct values; UNION ALL also returns duplicate values
sql = 'SELECT City FROM Customers \
        UNION \
        SELECT City FROM Suppliers \
        ORDER BY City;'
# Another example where we add a column to show whether the 'type' is a customer or supplier
sql = 'SELECT "Customer" AS Type, Contactname, City, Country \
        FROM Customers \
        UNION \
        SELECT "Supplier", ContactName, City, Country \
        FROM Suppliers;'

# GROUP BY can be useful for summarizing, and is often used with aggregate functions
# eg: find how many customers are in each country
sql = 'SELECT COUNT(CustomerID), Country FROM Customers \
        GROUP BY Country \
        ORDER BY COUNT(CustomerID) DESC;'
# Also good for relating summaries between different tables
sql = 'SELECT s.ShipperName, COUNT(o.OrderID) AS Number_of_Orders FROM ORDERS as o \
        LEFT JOIN Shippers AS s ON o.ShipperID = s.ShipperID \
        GROUP BY ShipperName;'

# WHERE cannot be used with aggregate functions - use HAVING instead
sql = 'SELECT COUNT(CustomerID), Country FROM Customers \
        GROUP BY Country \
        HAVING COUNT(CustomerID) > 3 \
        ORDER BY COUNT(CustomerID) DESC;'

# EXISTS tests for existence of a record in a subquery (gives a Boolean result from subquery)
sql = 'SELECT SupplierName, Country, Phone FROM Suppliers \
        WHERE EXISTS (SELECT * FROM Products WHERE Products.SupplierID = Suppliers.SupplierID AND Price > 20);'

# ANY and ALL also give Booleans. There is also SOME
sql = 'SELECT ProductName FROM Products \
        WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails \
                                WHERE Quantity > 99);'
# Get all product names
sql = 'SELECT ALL ProductName FROM Products \
        WHERE TRUE;'
# List ProductName where there have been orders for >80
sql = 'Select ProductName FROM Products \
        WHERE ProductID = ANY \
            (SELECT ProductID FROM OrderDetails \
            WHERE Quantity > 80);'

# SELECT INTO copies results to a new table
sql = 'SELECT * INTO Germany_Customers FROM Customers \
        WHERE Country = "Germany";'
# Create a backup database
sql = 'SELECT * INTO CustomersBackup2022 FROM Customers;'
# Or a backup database in a new table
sql = 'SELECT * INTO CustomersBackup2022 IN "backup.db" FROM Customers;'
# You can also create a new empty table with the same structure as an old one
sql = 'SELECT * INTO NewCustomers FROM Customers \
        WHERE FALSE;'
# INSERT INTO SELECT copies results and inserts them into another table
sql = 'INSERT INTO Customers (CustomerName, City, Country) \
        SELECT SupplierName, City, Country FROM Suppliers;'

# CASE statements (just like Spotfire)
sql = 'SELECT OrderID, Quantity, CASE \
                                    WHEN Quantity >= 35 THEN "OK" \
                                    WHEN Quantity BETWEEN 30 AND 34 THEN "Reorder" \
                                    ELSE "Insufficient" \
                                END \
                                AS QuantityText \
        FROM OrderDetails \
        ORDER BY QuantityText;'
# Another example: order by Country but if that's null order by City
sql = 'SELECT CustomerName, City, Country FROM Customers \
        ORDER BY (CASE \
                    WHEN City IS NULL THEN Country \
                    ELSE City \
                  END);'

# Queries can be stored as 'procedures'
# Without parameters:
sql = 'CREATE PROCEDURE SelectAllCustomers \
        AS \
        SELECT * From Customers \
        GO;'
# To execute this procedure, use EXEC:
go = 'EXEC SelectAllCustomers;'
# With parameters:
sql = 'CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10) \
        AS \
        SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode \
        GO;'
go = 'EXEC SelectAllCustomers @City = "London", @PostalCode = "WA1 1DP";'
